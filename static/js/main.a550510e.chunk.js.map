{"version":3,"sources":["Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","_this","this","react_default","a","createElement","className","role","tabIndex","aria-label","type","placeholder","onChange","e","props","filterPlace","target","value","places","map","place","key","venue","id","onClick","listItemClick","onKeyPress","event","name","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","query","listofPlaces","state","markers","marker","setVisible","filter","toLowerCase","includes","setState","every","title","forEach","allPlaces","allMarkers","loadMap","url","index","window","document","getElementsByTagName","script","src","async","defer","onerror","alert","parentNode","insertBefore","mapLoader","initMap","getVenues","axios","get","URLSearchParams","client_id","client_secret","ll","v","limit","then","response","data","groups","items","catch","error","google","maps","Map","getElementById","center","lat","lng","zoom","infowindow","InfoWindow","venueName","concat","venueAddress","location","formattedAddress","dataSource","markerPoint","Marker","position","animation","Animation","DROP","push","addListener","setAnimation","BOUNCE","setTimeout","latLng","getPosition","setCenter","setContent","open","close","openingMarker","trigger","bind","assertThisInitialized","src_Sidebar","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qQA4CeA,0LAzCJ,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SACEE,KAAK,SACLC,SAAU,EACVC,aAAW,kBACXH,UAAU,eACVI,KAAK,OACLC,YAAY,kBACZC,SAAU,SAAAC,GAAC,OAAIZ,EAAKa,MAAMC,YAAYF,EAAEG,OAAOC,UAEjDd,EAAAC,EAAAC,cAAA,MACEC,UAAU,eACVC,KAAK,UACLE,aAAW,oBAEVP,KAAKY,MAAMI,OAAOC,IAAI,SAAAC,GAAK,OAC1BjB,EAAAC,EAAAC,cAAA,MACEC,UAAU,YACVC,KAAK,SACLc,IAAKD,EAAME,MAAMC,GACjBf,SAAU,EACVgB,QAAS,WACPvB,EAAKa,MAAMW,cAAcL,IAE3BM,WAAY,SAAAC,GACQ,UAAdA,EAAMN,KACRpB,EAAKa,MAAMW,cAAcL,KAI7BjB,EAAAC,EAAAC,cAAA,UAAKe,EAAME,MAAMM,kBAjCTC,+BC0LPC,cAtLb,SAAAA,EAAYhB,GAAO,IAAAb,EAAA,OAAA8B,OAAAC,EAAA,EAAAD,CAAA7B,KAAA4B,IACjB7B,EAAA8B,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAjC,KAAMY,KAcRC,YAAc,SAAAqB,GACZ,IAAIC,EAGJpC,EAAKqC,MAAMC,QAAQpB,IAAI,SAAAqB,GAAM,OAAIA,EAAOC,YAAW,KAC/CL,GACFC,EAAepC,EAAKqC,MAAMpB,OAAOwB,OAAO,SAAAtB,GAAK,OAC3CA,EAAME,MAAMM,KAAKe,cAAcC,SAASR,EAAMO,iBAEhD1C,EAAK4C,SAAS,CACZ3B,OAAQmB,IAGMpC,EAAKqC,MAAMC,QAAQG,OAAO,SAAAF,GAAM,OAC9CH,EAAaS,MAAM,SAAA1B,GAAK,OAAIA,EAAME,MAAMM,OAASY,EAAOO,UAG5CC,QAAQ,SAAAR,GAAM,OAAIA,EAAOC,YAAW,OAElDxC,EAAK4C,SAAS,CAAE3B,OAAQjB,EAAKqC,MAAMW,YACnChD,EAAK4C,SAAS,CAAEN,QAAStC,EAAKqC,MAAMY,eAnCrBjD,EA2CnBkD,QAAU,YA+IZ,SAAmBC,GACjB,IAAIC,EAAQC,OAAOC,SAASC,qBAAqB,UAAU,GACvDC,EAASH,OAAOC,SAASlD,cAAc,UAC3CoD,EAAOC,IAAMN,EACbK,EAAOE,OAAQ,EACfF,EAAOG,OAAQ,EACfH,EAAOI,QAAU,WACfC,MAAM,sCAERT,EAAMU,WAAWC,aAAaP,EAAQJ,GAvJpCY,CACE,4GAEFX,OAAOY,QAAUjE,EAAKiE,SA/CLjE,EAoDnBkE,UAAY,WAWVC,IACGC,IAXc,gDAWC,IAAIC,gBAVH,CACjBC,UAAW,mDACXC,cAAe,mDACfpC,MAAO,OACPqC,GAAI,kBACJC,EAAG,WACHC,MAAO,MAKNC,KAAK,SAAAC,GACJ5E,EAAK4C,SACH,CAEEI,UAAW4B,EAASC,KAAKD,SAASE,OAAO,GAAGC,MAC5C9D,OAAQ2D,EAASC,KAAKD,SAASE,OAAO,GAAGC,OAE3C/E,EAAKkD,aAGR8B,MAAM,SAAAC,GACLpB,MAAM,+DA5EO7D,EAgFnBiE,QAAU,WACR,IAAI/C,EAAM,IAAImC,OAAO6B,OAAOC,KAAKC,IAAI9B,SAAS+B,eAAe,OAAQ,CACnEC,OAAQ,CAAEC,IAAK,UAAWC,IAAK,UAC/BC,KAAM,KAKJC,EAAa,IAAIrC,OAAO6B,OAAOC,KAAKQ,WAKxC3F,EAAKqC,MAAMpB,OAAOC,IAAI,SAAAC,GACpB,IAAIyE,EAAS,OAAAC,OAAU1E,EAAME,MAAMM,KAAtB,SACTmE,EAAY,eAAAD,OACd1E,EAAME,MAAM0E,SAASC,iBAAiB,GADxB,QAGZC,EAAU,wDAIRC,EAAc,CAClBX,IAAKpE,EAAME,MAAM0E,SAASR,IAC1BC,IAAKrE,EAAME,MAAM0E,SAASP,KAExBjD,EAAS,IAAIc,OAAO6B,OAAOC,KAAKgB,OAAO,CACzCC,SAAUF,EACVhF,IAAKA,EACLmF,UAAWhD,OAAO6B,OAAOC,KAAKmB,UAAUC,KACxCzD,MAAO3B,EAAME,MAAMM,OAMrB3B,EAAKqC,MAAMC,QAAQkE,KAAKjE,GACxBvC,EAAKqC,MAAMY,WAAWuD,KAAKjE,GAE3BA,EAAOkE,YAAY,QAAS,YAU5B,SAAuBlE,GACrBA,EAAOmE,aAAarD,OAAO6B,OAAOC,KAAKmB,UAAUK,QACjDC,WAAW,WACTrE,EAAOmE,aAAa,OACnB,KAEH,IAAIG,EAAStE,EAAOuE,cACpB5F,EAAI6F,UAAUF,GAEVjB,GACFF,EAAWsB,WAAWpB,EAAYE,EAAeG,GACjDP,EAAWuB,KAAK/F,EAAKqB,IAErBmD,EAAWsB,WAAW,2BAMxB3D,OAAO6B,OAAOC,KAAKzD,MAAM+E,YAAYvF,EAAK,QAAS,WACjDwE,EAAWwB,UA7BbC,CAAc5E,QAxHDvC,EA8JnBwB,cAAgB,SAAAL,GAEdnB,EAAKqC,MAAMC,QAAQpB,IAAI,SAAAqB,GACjBA,EAAOO,QAAU3B,EAAME,MAAMM,MAC/B0B,OAAO6B,OAAOC,KAAKzD,MAAM0F,QAAQ7E,EAAQ,YA/J7CvC,EAAKqC,MAAQ,CACXW,UAAW,GACXC,WAAY,GACZhC,OAAQ,GACRqB,QAAS,IAGXtC,EAAKiE,QAAUjE,EAAKiE,QAAQoD,KAAbvF,OAAAwF,EAAA,EAAAxF,QAAAwF,EAAA,EAAAxF,CAAA9B,KAVEA,mFAwCjBC,KAAKiE,6CAgIL,OACEhE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OACdH,EAAAC,EAAAC,cAACmH,EAAD,CACEtG,OAAQhB,KAAKoC,MAAMpB,OACnBqB,QAASrC,KAAKoC,MAAMC,QACpBd,cAAevB,KAAKuB,cACpBV,YAAab,KAAKa,cAEpBZ,EAAAC,EAAAC,cAAA,OAAKkB,GAAG,MAAMhB,KAAK,wBAjLTsB,aCKE4F,QACW,cAA7BnE,OAAO0C,SAAS0B,UAEe,UAA7BpE,OAAO0C,SAAS0B,UAEhBpE,OAAO0C,SAAS0B,SAASC,MACvB,2DCVNC,IAASC,OAAO1H,EAAAC,EAAAC,cAACyH,EAAD,MAASvE,SAAS+B,eAAe,SDmH3C,kBAAmByC,WACrBA,UAAUC,cAAcC,MAAMrD,KAAK,SAAAsD,GACjCA,EAAaC","file":"static/js/main.a550510e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Sidebar extends Component {\n  render() {\n    return (\n      <div className=\"sidebar\">\n        <input\n          role=\"search\"\n          tabIndex={0}\n          aria-label=\"Filter Location\"\n          className=\"search-field\"\n          type=\"text\"\n          placeholder=\"Filter Location\"\n          onChange={e => this.props.filterPlace(e.target.value)}\n        />\n        <ol\n          className=\"locationList\"\n          role=\"listbox\"\n          aria-label=\"List of Location\"\n        >\n          {this.props.places.map(place => (\n            <li\n              className=\"listitems\"\n              role=\"option\"\n              key={place.venue.id}\n              tabIndex={0}\n              onClick={() => {\n                this.props.listItemClick(place);\n              }}\n              onKeyPress={event => {\n                if (event.key === \"Enter\") {\n                  this.props.listItemClick(place);\n                }\n              }}\n            >\n              <h3>{place.venue.name}</h3>\n            </li>\n          ))}\n        </ol>\n      </div>\n    );\n  }\n}\n\nexport default Sidebar;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      allPlaces: [],\n      allMarkers: [],\n      places: [],\n      markers: []\n    };\n\n    this.initMap = this.initMap.bind(this);\n  }\n\n  // This is the function filyters our location and associated marker as per the user query in search field.\n\n  filterPlace = query => {\n    let listofPlaces;\n    let listofMarkers;\n\n    this.state.markers.map(marker => marker.setVisible(true));\n    if (query) {\n      listofPlaces = this.state.places.filter(place =>\n        place.venue.name.toLowerCase().includes(query.toLowerCase())\n      );\n      this.setState({\n        places: listofPlaces\n      });\n\n      listofMarkers = this.state.markers.filter(marker =>\n        listofPlaces.every(place => place.venue.name !== marker.title)\n      );\n\n      listofMarkers.forEach(marker => marker.setVisible(false));\n    } else {\n      this.setState({ places: this.state.allPlaces });\n      this.setState({ markers: this.state.allMarkers });\n    }\n  };\n\n  componentDidMount() {\n    this.getVenues();\n  }\n\n  loadMap = () => {\n    mapLoader(\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDpBtae0doKgYZ4NXZucWZnNNGpdU1HV6M&v=3&callback=initMap\"\n    );\n    window.initMap = this.initMap;\n  };\n\n  // the function that gets data from foursquare using the apy and query food.\n\n  getVenues = () => {\n    const endPoint = \"https://api.foursquare.com/v2/venues/explore?\";\n    const parameters = {\n      client_id: \"HPEPLXJ4YXGSNB2P2MJOY3WM2D0SJX1JRIMUWTPMTOCH34IX\",\n      client_secret: \"QTXHBFDY3ULSLB511BVEGUO3UZ54XDXZIUE4XWEDVZYLQYSB\",\n      query: \"food\",\n      ll: \"23.8103,90.4125\",\n      v: \"20181808\",\n      limit: 10\n    };\n\n    axios\n      .get(endPoint + new URLSearchParams(parameters))\n      .then(response => {\n        this.setState(\n          {\n            //response data is saved in two state, one for regular use and another for resetting purpose.\n            allPlaces: response.data.response.groups[0].items,\n            places: response.data.response.groups[0].items\n          },\n          this.loadMap()\n        );\n      })\n      .catch(error => {\n        alert(\"Sorry Data Can't be loaded. Please Try refresh the page.\");\n      });\n  };\n\n  initMap = () => {\n    var map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: 23.804343, lng: 90.41343 },\n      zoom: 14\n    });\n\n    // creating infoWindow\n\n    let infowindow = new window.google.maps.InfoWindow();\n\n    // maps through the places obtained through foursquare api call\n\n    // eslint-disable-next-line no-use-before-define\n    this.state.places.map(place => {\n      let venueName = `<h3>${place.venue.name}</h3>`;\n      let venueAddress = `<p>Address: ${\n        place.venue.location.formattedAddress[0]\n      }</p>`;\n      let dataSource = `<p class=\"dataSource\">Data provided by Foursquare</p>`;\n\n      //marker is created for each place.\n\n      const markerPoint = {\n        lat: place.venue.location.lat,\n        lng: place.venue.location.lng\n      };\n      let marker = new window.google.maps.Marker({\n        position: markerPoint,\n        map: map,\n        animation: window.google.maps.Animation.DROP,\n        title: place.venue.name\n      });\n\n      // markers is pushed in two different state. One to be used for regular purpose and another\n      // for resetting the marker once there is no query\n\n      this.state.markers.push(marker);\n      this.state.allMarkers.push(marker);\n\n      marker.addListener(\"click\", function() {\n        openingMarker(marker);\n      });\n\n      /*\n      Opening the infowindow once a marker is clicked\n      */\n\n      // marker opening function that sets the content of the infowWindow using the foursquare data.\n\n      function openingMarker(marker) {\n        marker.setAnimation(window.google.maps.Animation.BOUNCE);\n        setTimeout(function() {\n          marker.setAnimation(null);\n        }, 600);\n\n        let latLng = marker.getPosition();\n        map.setCenter(latLng);\n\n        if (venueName) {\n          infowindow.setContent(venueName + venueAddress + dataSource);\n          infowindow.open(map, marker);\n        } else {\n          infowindow.setContent(\"Sorry No Data Available\");\n        }\n\n        //Thanks for the help with this from\n        //https://stackoverflow.com/questions/10022873/closing-info-windows-in-google-maps-by-clicking-the-map\n\n        window.google.maps.event.addListener(map, \"click\", function() {\n          infowindow.close();\n        });\n      }\n    });\n  };\n\n  // this is the function that is used by the location list on the sidebar and triggers marker click\n  // once the individual place title on the sidebar is clicked\n\n  listItemClick = place => {\n    // eslint-disable-next-line no-use-before-define\n    this.state.markers.map(marker => {\n      if (marker.title === place.venue.name) {\n        window.google.maps.event.trigger(marker, \"click\");\n      }\n    });\n  };\n\n  render() {\n    return (\n      <main className=\"App\">\n        <Sidebar\n          places={this.state.places}\n          markers={this.state.markers}\n          listItemClick={this.listItemClick}\n          filterPlace={this.filterPlace}\n        />\n        <div id=\"map\" role=\"application\" />\n      </main>\n    );\n  }\n}\n\nexport default App;\n\n// this is the function that loads tthat helps with the google map working with React.\n\nfunction mapLoader(url) {\n  let index = window.document.getElementsByTagName(\"script\")[0];\n  let script = window.document.createElement(\"script\");\n  script.src = url;\n  script.async = true;\n  script.defer = true;\n  script.onerror = () => {\n    alert(\"Google Map API can not be loaded.\");\n  };\n  index.parentNode.insertBefore(script, index);\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}